# Generated by Django 5.2.1 on 2025-05-25 11:18

from django.db import migrations

TAG_DATA = {
    "AP": {"name": "Periodicals", "description": "AP – Periodicals"},
    "B": {
        "name": "Philosophy. Psychology. Religion",
        "description": "B – Philosophy. Psychology. Religion",
    },
    "D": {"name": "World History", "description": "D – World History"},
    "DI": {
        "name": "History of Americas",
        "parent_id": "D",
        "description": "DI – History of Americas (parent: D)",
    },
    "O": {"name": "Other", "description": "O – Other"},
    "P": {
        "name": "Language and Literature",
        "description": "P – Language and Literature",
    },
    "PR": {
        "name": "English Literature",
        "parent_id": "P",
        "description": "PR – English Literature (parent: P)",
    },
    "PS": {
        "name": "American Literature",
        "parent_id": "P",
        "description": "PS – American Literature (parent: P)",
    },
    "PZ": {
        "name": "Fiction",
        "parent_id": "P",
        "description": "PZ – Fiction (parent: P)",
    },
    "Q": {"name": "Science", "description": "Q – Science"},
}


def populate_tags(apps, schema_editor):
    Tag = apps.get_model("library", "Tag")
    for tag_id, tag_info in TAG_DATA.items():
        parent = None
        if "parent_id" in tag_info:
            try:
                parent = Tag.objects.get(id=tag_info["parent_id"])
            except Tag.DoesNotExist:
                print(
                    f"Warning: Parent tag with id {tag_info['parent_id']} not found for tag {tag_id}. Skipping parent assignment."
                )

        Tag.objects.update_or_create(
            id=tag_id,
            defaults={
                "name": tag_info["name"],
                "description": tag_info.get("description", ""),
                "parent_tag": parent,
            },
        )


def remove_tags(apps, schema_editor):
    Tag = apps.get_model("library", "Tag")
    Tag.objects.filter(id__in=TAG_DATA.keys()).delete()


class Migration(migrations.Migration):
    dependencies = [
        ("library", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(populate_tags, reverse_code=remove_tags),
    ]
